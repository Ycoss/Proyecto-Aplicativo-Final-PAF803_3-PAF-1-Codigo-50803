<mxfile host="Electron" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/26.2.2 Chrome/134.0.6998.178 Electron/35.1.2 Safari/537.36" version="26.2.2">
  <diagram id="D2R2A6H9M1V3N8K0P_V4" name="Page-1_Support_Utilities_Detailed_v3">
    <mxGraphModel dx="1980" dy="993" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="3000" pageHeight="2400" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="pkg_main_title" value="Paquete: main" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=14;fontStyle=1;" parent="1" vertex="1">
          <mxGeometry x="20" y="20" width="180" height="30" as="geometry" />
        </mxCell>
        <mxCell id="cls_Window" value="Window&lt;br&gt;&lt;i&gt;extends JFrame&lt;br&gt;implements Runnable&lt;/i&gt;&lt;br&gt;&lt;hr&gt;- {static} serialVersionUID: long&lt;br&gt;- canvas: Canvas&lt;br&gt;- thread: Thread&lt;br&gt;- running: boolean&lt;br&gt;- bs: BufferStrategy&lt;br&gt;- g: Graphics&lt;br&gt;- FPS: int&lt;br&gt;- TARGETTIME: double&lt;br&gt;- delta: double&lt;br&gt;- AVERAGEFPS: int&lt;br&gt;- keyBoard: KeyBoard&lt;br&gt;- mouseInput: MouseInput&lt;hr&gt;+ Window()&lt;br&gt;+ {static} main(args: String[]): void&lt;br&gt;- update(dt: float): void&lt;br&gt;- draw(): void&lt;br&gt;- init(): void&lt;br&gt;+ run(): void&lt;br&gt;- start(): void&lt;br&gt;- stop(): void" style="swimlane;fontStyle=0;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=400;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=0;marginBottom=0;html=1;whiteSpace=wrap;overflow=hidden;" parent="1" vertex="1">
          <mxGeometry x="40" y="60" width="320" height="400" as="geometry" />
        </mxCell>
        <mxCell id="pkg_gameObjects_util_title" value="Paquete: gameObjects (utilidad)" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=14;fontStyle=1;" parent="1" vertex="1">
          <mxGeometry x="380" y="20" width="280" height="30" as="geometry" />
        </mxCell>
        <mxCell id="cls_Constants" value="Constants&lt;br&gt;&lt;hr&gt;+ {static} UFO_MAX_VEL: int (value per difficulty)&lt;br&gt;+ {static} setDifficulty(difficulty: String): void &lt;i&gt;(adjusts UFO speeds, signals Assets to update player/laser textures)&lt;/i&gt;&lt;hr&gt;+ {static} WIDTH: int&lt;br&gt;+ {static} HEIGHT: int&lt;br&gt;+ {static} FIRERATE: int&lt;br&gt;+ {static} DELTAANGLE: double&lt;br&gt;+ {static} ACC: double&lt;br&gt;+ {static} PLAYER_MAX_VEL: double&lt;br&gt;+ {static} FLICKER_TIME: long&lt;br&gt;+ {static} SPAWNING_TIME: long&lt;br&gt;+ {static} GAME_OVER_TIME: long&lt;br&gt;+ {static} LASER_VEL: double&lt;br&gt;+ {static} METEOR_INIT_VEL: double&lt;br&gt;+ {static} METEOR_SCORE: int&lt;br&gt;+ {static} METEOR_MAX_VEL: double&lt;br&gt;+ {static} SHIELD_DISTANCE: int&lt;br&gt;+ {static} NODE_RADIUS: int&lt;br&gt;+ {static} UFO_MASS: double&lt;br&gt;+ {static} UFO_FIRE_RATE: long&lt;br&gt;+ {static} UFO_ANGLE_RANGE: double&lt;br&gt;+ {static} UFO_SCORE: int&lt;br&gt;+ {static} UFO_SPAWN_RATE: long&lt;br&gt;+ {static} PLAY: String&lt;br&gt;+ {static} EXIT: String&lt;br&gt;+ {static} LOADING_BAR_WIDTH: int&lt;br&gt;+ {static} LOADING_BAR_HEIGHT: int&lt;br&gt;+ {static} RETURN: String&lt;br&gt;+ {static} HIGH_SCORES: String&lt;br&gt;+ {static} SCORE: String&lt;br&gt;+ {static} DATE: String&lt;br&gt;+ {static} SCORE_PATH: String&lt;br&gt;+ {static} POWER_UP_DURATION: long&lt;br&gt;+ {static} POWER_UP_SPAWN_TIME: long&lt;br&gt;+ {static} SHIELD_TIME: long&lt;br&gt;+ {static} DOUBLE_SCORE_TIME: long&lt;br&gt;+ {static} FAST_FIRE_TIME: long&lt;br&gt;+ {static} DOUBLE_GUN_TIME: long&lt;br&gt;+ {static} SCORE_STACK: int&lt;br&gt;+ {static} PAUSE_KEY: int (e.g., KeyEvent.VK_SPACE)" style="swimlane;fontStyle=0;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=645;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=0;marginBottom=0;html=1;whiteSpace=wrap;overflow=hidden;" parent="1" vertex="1">
          <mxGeometry x="400" y="60" width="300" height="645" as="geometry" />
        </mxCell>
        <mxCell id="pkg_graphics_title" value="Paquete: graphics" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=14;fontStyle=1;" parent="1" vertex="1">
          <mxGeometry x="720" y="20" width="180" height="30" as="geometry" />
        </mxCell>
        <mxCell id="cls_Animation" value="Animation&lt;br&gt;&lt;hr&gt;- frames: BufferedImage[]&lt;br&gt;- velocity: int&lt;br&gt;- index: int&lt;br&gt;- running: boolean&lt;br&gt;- position: Vector2D&lt;br&gt;- time: long&lt;hr&gt;+ Animation(frames: BufferedImage[], velocity: int, position: Vector2D)&lt;br&gt;+ update(dt: float): void&lt;br&gt;+ isRunning(): boolean&lt;br&gt;+ getPosition(): Vector2D&lt;br&gt;+ getCurrentFrame(): BufferedImage" style="swimlane;fontStyle=0;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=290;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=0;marginBottom=0;html=1;whiteSpace=wrap;overflow=hidden;" parent="1" vertex="1">
          <mxGeometry x="740" y="60" width="320" height="230" as="geometry" />
        </mxCell>
        <mxCell id="cls_Assets" value="Assets&lt;br&gt;&lt;hr&gt;+ {static} playerBlue: BufferedImage&lt;br&gt;+ {static} playerGreen: BufferedImage&lt;br&gt;+ {static} playerRed: BufferedImage&lt;br&gt;+ {static} laserBlue: BufferedImage&lt;br&gt;+ {static} laserGreen: BufferedImage&lt;br&gt;+ {static} laserRed: BufferedImage&lt;br&gt;+ {static} currentPlayerTexture: BufferedImage&lt;br&gt;+ {static} currentLaserTexture: BufferedImage&lt;br&gt;+ {static} currentDoubleGunPlayerTexture: BufferedImage&lt;br&gt;+ {static} loaded: boolean&lt;br&gt;+ {static} count: float&lt;br&gt;+ {static} MAX_COUNT: float&lt;br&gt;+ {static} player: BufferedImage&lt;br&gt;+ {static} doubleGunPlayer: BufferedImage&lt;br&gt;+ {static} speed: BufferedImage&lt;br&gt;+ {static} shieldEffect: BufferedImage[]&lt;br&gt;+ {static} exp: BufferedImage[]&lt;br&gt;+ {static} blueLaser: BufferedImage&lt;br&gt;+ {static} greenLaser: BufferedImage&lt;br&gt;+ {static} redLaser: BufferedImage&lt;br&gt;+ {static} bigs: BufferedImage[]&lt;br&gt;+ {static} meds: BufferedImage[]&lt;br&gt;+ {static} smalls: BufferedImage[]&lt;br&gt;+ {static} tinies: BufferedImage[]&lt;br&gt;+ {static} ufo: BufferedImage&lt;br&gt;+ {static} numbers: BufferedImage[]&lt;br&gt;+ {static} life: BufferedImage&lt;br&gt;+ {static} fontBig: Font&lt;br&gt;+ {static} fontMed: Font&lt;br&gt;+ {static} backgroundMusic: Clip&lt;br&gt;+ {static} explosion: Clip&lt;br&gt;+ {static} playerLoose: Clip&lt;br&gt;+ {static} playerShoot: Clip&lt;br&gt;+ {static} ufoShoot: Clip&lt;br&gt;+ {static} powerUp: Clip&lt;br&gt;+ {static} blueBtn: BufferedImage&lt;br&gt;+ {static} greyBtn: BufferedImage&lt;br&gt;+ {static} orb: BufferedImage&lt;br&gt;+ {static} doubleScore: BufferedImage&lt;br&gt;+ {static} doubleGun: BufferedImage&lt;br&gt;+ {static} fastFire: BufferedImage&lt;br&gt;+ {static} shield: BufferedImage&lt;br&gt;+ {static} star: BufferedImage&lt;hr&gt;+ {static} init(): void&lt;br&gt;+ {static} loadPlayerTextures(): void&lt;br&gt;+ {static} loadLaserTextures(): void&lt;br&gt;+ {static} updateDifficultyTextures(difficulty: String): void&lt;br&gt;..." style="swimlane;fontStyle=0;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=790;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=0;marginBottom=0;html=1;whiteSpace=wrap;overflow=hidden;" parent="1" vertex="1">
          <mxGeometry x="1080" y="60" width="300" height="760" as="geometry" />
        </mxCell>
        <mxCell id="cls_Loader" value="Loader&lt;br&gt;&lt;hr&gt;+ {static} ImageLoader(path: String): BufferedImage&lt;br&gt;+ {static} loadFont(path: String, size: int): Font&lt;br&gt;+ {static} loadSound(path: String): Clip" style="swimlane;fontStyle=0;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=120;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=0;marginBottom=0;html=1;whiteSpace=wrap;overflow=hidden;" parent="1" vertex="1">
          <mxGeometry x="1400" y="60" width="300" height="90" as="geometry" />
        </mxCell>
        <mxCell id="cls_Sound" value="Sound&lt;br&gt;&lt;hr&gt;- clip: Clip&lt;br&gt;- volume: FloatControl&lt;hr&gt;+ Sound(clip: Clip)&lt;br&gt;+ play(): void&lt;br&gt;+ loop(): void&lt;br&gt;+ stop(): void&lt;br&gt;+ pause(): void (new)&lt;br&gt;+ resume(): void (new)&lt;br&gt;+ getFramePosition(): int&lt;br&gt;+ changeVolume(value: float): void" style="swimlane;fontStyle=0;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=210;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=0;marginBottom=0;html=1;whiteSpace=wrap;overflow=hidden;" parent="1" vertex="1">
          <mxGeometry x="1720" y="60" width="280" height="210" as="geometry" />
        </mxCell>
        <mxCell id="cls_Text" value="Text&lt;br&gt;&lt;hr&gt;+ {static} drawText(g: Graphics, text: String, pos: Vector2D, center: boolean, color: Color, font: Font): void" style="swimlane;fontStyle=0;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=80;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=0;marginBottom=0;html=1;whiteSpace=wrap;overflow=hidden;" parent="1" vertex="1">
          <mxGeometry x="2020" y="60" width="420" height="80" as="geometry" />
        </mxCell>
        <mxCell id="pkg_input_title" value="Paquete: input" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=14;fontStyle=1;" parent="1" vertex="1">
          <mxGeometry x="20" y="780" width="180" height="30" as="geometry" />
        </mxCell>
        <mxCell id="cls_KeyBoard" value="KeyBoard&lt;br&gt;&lt;i&gt;implements KeyListener&lt;/i&gt;&lt;br&gt;&lt;hr&gt;- keys: boolean[]&lt;br&gt;+ {static} UP: boolean&lt;br&gt;+ {static} LEFT: boolean&lt;br&gt;+ {static} RIGHT: boolean&lt;br&gt;+ {static} SHOOT: boolean&lt;br&gt;+ {static} PAUSE: boolean (new, for Spacebar)&lt;hr&gt;+ KeyBoard()&lt;br&gt;+ update(): void&lt;br&gt;+ keyPressed(e: KeyEvent): void&lt;br&gt;+ keyReleased(e: KeyEvent): void&lt;br&gt;+ keyTyped(e: KeyEvent): void" style="swimlane;fontStyle=0;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=230;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=0;marginBottom=0;html=1;whiteSpace=wrap;overflow=hidden;" parent="1" vertex="1">
          <mxGeometry x="40" y="820" width="280" height="230" as="geometry" />
        </mxCell>
        <mxCell id="cls_MouseInput" value="MouseInput&lt;br&gt;&lt;i&gt;extends MouseAdapter&lt;/i&gt;&lt;br&gt;&lt;hr&gt;+ {static} X: int&lt;br&gt;+ {static} Y: int&lt;br&gt;+ {static} MLB: boolean&lt;br&gt;- {static} clicked: boolean&lt;hr&gt;+ MouseInput()&lt;br&gt;+ update(): void&lt;br&gt;+ mousePressed(e: MouseEvent): void&lt;br&gt;+ mouseReleased(e: MouseEvent): void&lt;br&gt;+ mouseDragged(e: MouseEvent): void&lt;br&gt;+ mouseMoved(e: MouseEvent): void" style="swimlane;fontStyle=0;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=220;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=0;marginBottom=0;html=1;whiteSpace=wrap;overflow=hidden;" parent="1" vertex="1">
          <mxGeometry x="340" y="820" width="300" height="220" as="geometry" />
        </mxCell>
        <mxCell id="pkg_io_title" value="Paquete: io" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=14;fontStyle=1;" parent="1" vertex="1">
          <mxGeometry x="660" y="770" width="180" height="30" as="geometry" />
        </mxCell>
        <mxCell id="cls_ScoreData" value="ScoreData&lt;br&gt;&lt;hr&gt;- date: String&lt;br&gt;- score: int&lt;hr&gt;+ ScoreData(score: int)&lt;br&gt;+ ScoreData()&lt;br&gt;+ getDate(): String&lt;br&gt;+ setDate(date: String): void&lt;br&gt;+ getScore(): int&lt;br&gt;+ setScore(score: int): void" style="swimlane;fontStyle=0;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=180;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=0;marginBottom=0;html=1;whiteSpace=wrap;overflow=hidden;" parent="1" vertex="1">
          <mxGeometry x="670" y="820" width="260" height="180" as="geometry" />
        </mxCell>
        <mxCell id="cls_JSONParser" value="JSONParser&lt;br&gt;&lt;hr&gt;+ {static} readFile(): ArrayList&amp;lt;ScoreData&amp;gt;&lt;br&gt;  &lt;i&gt;throws FileNotFoundException&lt;/i&gt;&lt;br&gt;+ {static} writeFile(dataList: ArrayList&amp;lt;ScoreData&amp;gt;): void&lt;br&gt;  &lt;i&gt;throws IOException&lt;/i&gt;" style="swimlane;fontStyle=0;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=140;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=0;marginBottom=0;html=1;whiteSpace=wrap;overflow=visible;" parent="1" vertex="1">
          <mxGeometry x="960" y="830" width="360" height="140" as="geometry" />
        </mxCell>
        <mxCell id="pkg_math_title" value="Paquete: math" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=14;fontStyle=1;" parent="1" vertex="1">
          <mxGeometry x="30" y="1070" width="180" height="30" as="geometry" />
        </mxCell>
        <mxCell id="cls_Vector2D" value="Vector2D&lt;br&gt;&lt;hr&gt;- x: double&lt;br&gt;- y: double&lt;hr&gt;+ Vector2D(x: double, y: double)&lt;br&gt;+ Vector2D(v: Vector2D)&lt;br&gt;+ Vector2D()&lt;br&gt;+ add(v: Vector2D): Vector2D&lt;br&gt;+ subtract(v: Vector2D): Vector2D&lt;br&gt;+ scale(value: double): Vector2D&lt;br&gt;+ limit(value: double): Vector2D&lt;br&gt;+ normalize(): Vector2D&lt;br&gt;+ getMagnitude(): double&lt;br&gt;+ setDirection(angle: double): Vector2D&lt;br&gt;+ getAngle(): double&lt;br&gt;+ getX(): double&lt;br&gt;+ setX(x: double): void&lt;br&gt;+ getY(): double&lt;br&gt;+ setY(y: double): void" style="swimlane;fontStyle=0;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=360;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=0;marginBottom=0;html=1;whiteSpace=wrap;overflow=hidden;" parent="1" vertex="1">
          <mxGeometry x="50" y="1110" width="320" height="360" as="geometry" />
        </mxCell>
        <mxCell id="pkg_ui_title" value="Paquete: ui" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=14;fontStyle=1;" parent="1" vertex="1">
          <mxGeometry x="380" y="1070" width="180" height="30" as="geometry" />
        </mxCell>
        <mxCell id="iface_Action" value="&lt;i&gt;&amp;lt;&amp;lt;Interface&amp;gt;&amp;gt;&lt;br&gt;Action&lt;/i&gt;&lt;br&gt;&lt;hr&gt;+ {abstract} doAction(): void" style="swimlane;fontStyle=0;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=80;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=0;marginBottom=0;html=1;whiteSpace=wrap;overflow=hidden;" parent="1" vertex="1">
          <mxGeometry x="400" y="1110" width="200" height="80" as="geometry" />
        </mxCell>
        <mxCell id="cls_Button" value="Button&lt;br&gt;&lt;hr&gt;- mouseOutImg: BufferedImage&lt;br&gt;- mouseInImg: BufferedImage&lt;br&gt;- mouseIn: boolean&lt;br&gt;- boundingBox: Rectangle&lt;br&gt;- action: Action&lt;br&gt;- text: String&lt;br&gt;(Used in MenuState for Controls, Difficulty;&lt;br&gt;PauseMenuState for Resume, Restart, Menu)&lt;hr&gt;+ Button(mouseOutImg: BufferedImage, mouseInImg: BufferedImage, x: int, y: int, text: String, action: Action)&lt;br&gt;+ update(): void&lt;br&gt;+ draw(g: Graphics): void" style="swimlane;fontStyle=0;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=260;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=0;marginBottom=0;html=1;whiteSpace=wrap;overflow=hidden;" parent="1" vertex="1">
          <mxGeometry x="630" y="1110" width="480" height="260" as="geometry" />
        </mxCell>
        <mxCell id="rel_Button_Action" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;endArrow=open;endFill=0;startArrow=none;startFill=0;dashed=1;strokeWidth=1;entryDx=0;entryDy=0.5;entryPerimeter=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="1" source="cls_Button" target="iface_Action" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="620" y="1390" as="sourcePoint" />
            <mxPoint x="500" y="1200" as="targetPoint" />
            <Array as="points">
              <mxPoint x="870" y="1390" />
              <mxPoint x="500" y="1390" />
            </Array>
          </mxGeometry>
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
